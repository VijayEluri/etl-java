doctype public "-//IDN etl.sf.net//ETL//Grammar 0.3.0";
// Reference ETL Parser for Java
// Copyright (c) 2000-2007 Constantine A Plotnikov
//
// Permission is hereby granted, free of charge, to any person 
// obtaining a copy of this software and associated documentation 
// files (the "Software"), to deal in the Software without restriction,
// including without limitation the rights to use, copy, modify, merge, 
// publish, distribute, sublicense, and/or sell copies of the Software, 
// and to permit persons to whom the Software is furnished to do so, 
// subject to the following conditions:
//
// The above copyright notice and this permission notice shall be 
// included in all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, 
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF 
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND 
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
// BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN 
// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN 
// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE 
// SOFTWARE. 

/// This is a grammar for doctype declaration. The doctype can be encountered 
/// as the first statement in the source code of ELT-based language. This 
/// grammar is hard-coded in the parser for obvious reasons. So this file is 
/// for information only.
///
/// Note that this grammar does not support documentation comments. The mapping
/// for these comments differs between different contexts and there is no 
/// universal mapping that is suitable for all.
///
/// <author>const</author>
grammar net.sf.etl.grammars.DoctypeDeclaration {
	namespace dc = "http://etl.sf.net/etl/doctype/0.3.0";
	
	/// This is the only context in the grammar	
	context default DoctypeContext {
		
		/// A definition for string used in the grammar. Two kinds of string are allowed. 
		/// <example>
		///		'aaa'
		///		"aaa"
		/// </example>
		def String {
			string(quote="\"") | string(quote='\'');
		};

		/// A doctype statement that declares grammar associated 
		/// with the file. The doctype statement is an obvious rip-off of XML doctype. 
		/// Inline grammar is not supported yet. 
		///
		/// System identifier or public identifier or both might be used. 
		/// <example>
		/// 	doctype public "-//IDN etl.sf.net/ETL/Grammar 0.3.0";
		/// 	doctype "http://etl.sf.net/2005/etl/grammar.g.etl" public '-//IDN etl.sf.net/ETL/Grammar 0.3';
		/// 	doctype 'mygrammar.g.etl';
		/// </example>
		statement DoctypeStatement {
			^ dc:DoctypeDeclaration {
				% doctype {
				    {
				        @ type = token(script) | token(strict);
				    }?;
					{
						@ systemId = ref(String);
						% public {
							@ publicId = ref(String);
						}?;
					} | {
						% public {
							@ publicId = ref(String);
						};
					};
					% context {
						@ context = ref(String);
					}?;
				};
			};
		};
	};
};